package core;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.TreeMap;
import java.io.Serializable;
import java.util.Comparator;

public class Client implements Serializable{ /**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private final String _key;
	private String _name;
	private int _taxid;
	private boolean _hasnotifications= true;
	private TreeMap <String, Terminal> _associatedterminals = new TreeMap<String, Terminal>();
	private Level _level;
	private ArrayList<Notifications> _notifications= new ArrayList<Notifications>();
	private TreeMap<Integer,Communication> _communications= new TreeMap<Integer,Communication>();
	
	
	public Client (String key, String name, int taxid) {
		_key=key;
		_name=name;
		_taxid=taxid;
		_level= new NormalClient(this,0);
	
	}
	
	public ArrayList<Notifications> get_notifications() {
		return _notifications;
	}



	public void set_notifications(ArrayList<Notifications> _notifications) {
		this._notifications = _notifications;
	}



	public TreeMap<Integer, Communication> get_communications() {
		return _communications;
	}



	public void set_communications(TreeMap<Integer, Communication> _communications) {
		this._communications = _communications;
	}



	public String getKey() {
		return _key;
	}


	public String getName() {
		return _name;
	}


	public void setName(String name) {
		_name = name;
	}


	public int getTaxid() {
		return _taxid;
	}


	public void setTaxid(int taxid) {
		_taxid = taxid;
	}


	public boolean isNotifications() {
		return _hasnotifications;
	}


	public void setNotifications(boolean notifications) {
		_hasnotifications = notifications;
	}
	
	public String getLevelName () {
		return _level.getName();
	}
	
	public void addassociatedterminals (Terminal terminal) {
		_associatedterminals.put(terminal.get_key(), terminal);
		
	}
	
	public String ShowAssociatedTerminals () {
		String res ="";
		for (Map.Entry<String, Terminal> entry : _associatedterminals.entrySet()) {
			res= res+ entry.getKey() + "\n";
		}
		return res;
	}
	
	public void ChangeNotification () {	
		if (_hasnotifications=true){
			_hasnotifications=false;
		}	
		else {
			_hasnotifications=true;
		}
	}
	
	public float ClientBalance() { 
		float res = 0;
		for (Map.Entry<String, Terminal> entry: _associatedterminals.entrySet()) {
			res= res + entry.getValue().TerminalBalance();
		}
		return res;
	}
	
	public ArrayList<Integer> ClientDonePayments() {
		ArrayList<Integer> res = new ArrayList<Integer>();
		for (Map.Entry<String, Terminal> entry: _associatedterminals.entrySet()) { // runs the associated terminals and pick a _associatedterminals
			for (Map.Entry<Integer, Communication> entry2: entry.getValue().get_terminalpayments().entrySet()) { //pic 
				res.add(entry2.getKey());
				
			}
		}
		return res;
	}
	
	public ArrayList<Integer> ClientDebts() {
		ArrayList<Integer> res = new ArrayList<Integer>();
		for (Map.Entry<String, Terminal> entry: _associatedterminals.entrySet()) { // runs the associated terminals and pick a _associatedterminals
			for (Map.Entry<Integer, Communication> entry2: entry.getValue().get_terminaldebts().entrySet()) { //pic (K,V), value 
				res.add(entry2.getKey());
				
			}
		}
		return res;
	}
	
	public int ConsecutiveVideo() {
		count=0;
		for (Map.Entry<Integer, Communication> entry: _communications.entrySet()) {
			entry.getValue().this.	
			
		}
		
	}
}
		
